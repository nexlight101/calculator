// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calculatorpb/calculator.proto

package calculatorpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Sum struct {
	Number1              int32    `protobuf:"varint,1,opt,name=number1,proto3" json:"number1,omitempty"`
	Number2              int32    `protobuf:"varint,2,opt,name=number2,proto3" json:"number2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Sum) Reset()         { *m = Sum{} }
func (m *Sum) String() string { return proto.CompactTextString(m) }
func (*Sum) ProtoMessage()    {}
func (*Sum) Descriptor() ([]byte, []int) {
	return fileDescriptor_87e717c78a24322a, []int{0}
}

func (m *Sum) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sum.Unmarshal(m, b)
}
func (m *Sum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sum.Marshal(b, m, deterministic)
}
func (m *Sum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sum.Merge(m, src)
}
func (m *Sum) XXX_Size() int {
	return xxx_messageInfo_Sum.Size(m)
}
func (m *Sum) XXX_DiscardUnknown() {
	xxx_messageInfo_Sum.DiscardUnknown(m)
}

var xxx_messageInfo_Sum proto.InternalMessageInfo

func (m *Sum) GetNumber1() int32 {
	if m != nil {
		return m.Number1
	}
	return 0
}

func (m *Sum) GetNumber2() int32 {
	if m != nil {
		return m.Number2
	}
	return 0
}

type CalculatorRequest struct {
	Sum                  *Sum     `protobuf:"bytes,1,opt,name=sum,proto3" json:"sum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalculatorRequest) Reset()         { *m = CalculatorRequest{} }
func (m *CalculatorRequest) String() string { return proto.CompactTextString(m) }
func (*CalculatorRequest) ProtoMessage()    {}
func (*CalculatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_87e717c78a24322a, []int{1}
}

func (m *CalculatorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalculatorRequest.Unmarshal(m, b)
}
func (m *CalculatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalculatorRequest.Marshal(b, m, deterministic)
}
func (m *CalculatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculatorRequest.Merge(m, src)
}
func (m *CalculatorRequest) XXX_Size() int {
	return xxx_messageInfo_CalculatorRequest.Size(m)
}
func (m *CalculatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CalculatorRequest proto.InternalMessageInfo

func (m *CalculatorRequest) GetSum() *Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

type CalculatorResponse struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalculatorResponse) Reset()         { *m = CalculatorResponse{} }
func (m *CalculatorResponse) String() string { return proto.CompactTextString(m) }
func (*CalculatorResponse) ProtoMessage()    {}
func (*CalculatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_87e717c78a24322a, []int{2}
}

func (m *CalculatorResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalculatorResponse.Unmarshal(m, b)
}
func (m *CalculatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalculatorResponse.Marshal(b, m, deterministic)
}
func (m *CalculatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculatorResponse.Merge(m, src)
}
func (m *CalculatorResponse) XXX_Size() int {
	return xxx_messageInfo_CalculatorResponse.Size(m)
}
func (m *CalculatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CalculatorResponse proto.InternalMessageInfo

func (m *CalculatorResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

//Prime API messages
type PrimeNumberRequest struct {
	Number               int32    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrimeNumberRequest) Reset()         { *m = PrimeNumberRequest{} }
func (m *PrimeNumberRequest) String() string { return proto.CompactTextString(m) }
func (*PrimeNumberRequest) ProtoMessage()    {}
func (*PrimeNumberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_87e717c78a24322a, []int{3}
}

func (m *PrimeNumberRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrimeNumberRequest.Unmarshal(m, b)
}
func (m *PrimeNumberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrimeNumberRequest.Marshal(b, m, deterministic)
}
func (m *PrimeNumberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimeNumberRequest.Merge(m, src)
}
func (m *PrimeNumberRequest) XXX_Size() int {
	return xxx_messageInfo_PrimeNumberRequest.Size(m)
}
func (m *PrimeNumberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimeNumberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrimeNumberRequest proto.InternalMessageInfo

func (m *PrimeNumberRequest) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type PrimeNumberResponse struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrimeNumberResponse) Reset()         { *m = PrimeNumberResponse{} }
func (m *PrimeNumberResponse) String() string { return proto.CompactTextString(m) }
func (*PrimeNumberResponse) ProtoMessage()    {}
func (*PrimeNumberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_87e717c78a24322a, []int{4}
}

func (m *PrimeNumberResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrimeNumberResponse.Unmarshal(m, b)
}
func (m *PrimeNumberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrimeNumberResponse.Marshal(b, m, deterministic)
}
func (m *PrimeNumberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimeNumberResponse.Merge(m, src)
}
func (m *PrimeNumberResponse) XXX_Size() int {
	return xxx_messageInfo_PrimeNumberResponse.Size(m)
}
func (m *PrimeNumberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimeNumberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrimeNumberResponse proto.InternalMessageInfo

func (m *PrimeNumberResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

// Greatest Common Factor messages
type GCFRequest struct {
	Number1              int32    `protobuf:"varint,1,opt,name=number1,proto3" json:"number1,omitempty"`
	Number2              int32    `protobuf:"varint,2,opt,name=number2,proto3" json:"number2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GCFRequest) Reset()         { *m = GCFRequest{} }
func (m *GCFRequest) String() string { return proto.CompactTextString(m) }
func (*GCFRequest) ProtoMessage()    {}
func (*GCFRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_87e717c78a24322a, []int{5}
}

func (m *GCFRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GCFRequest.Unmarshal(m, b)
}
func (m *GCFRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GCFRequest.Marshal(b, m, deterministic)
}
func (m *GCFRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GCFRequest.Merge(m, src)
}
func (m *GCFRequest) XXX_Size() int {
	return xxx_messageInfo_GCFRequest.Size(m)
}
func (m *GCFRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GCFRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GCFRequest proto.InternalMessageInfo

func (m *GCFRequest) GetNumber1() int32 {
	if m != nil {
		return m.Number1
	}
	return 0
}

func (m *GCFRequest) GetNumber2() int32 {
	if m != nil {
		return m.Number2
	}
	return 0
}

type GCFResponse struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GCFResponse) Reset()         { *m = GCFResponse{} }
func (m *GCFResponse) String() string { return proto.CompactTextString(m) }
func (*GCFResponse) ProtoMessage()    {}
func (*GCFResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_87e717c78a24322a, []int{6}
}

func (m *GCFResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GCFResponse.Unmarshal(m, b)
}
func (m *GCFResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GCFResponse.Marshal(b, m, deterministic)
}
func (m *GCFResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GCFResponse.Merge(m, src)
}
func (m *GCFResponse) XXX_Size() int {
	return xxx_messageInfo_GCFResponse.Size(m)
}
func (m *GCFResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GCFResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GCFResponse proto.InternalMessageInfo

func (m *GCFResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type BreakWordRequest struct {
	Word                 string   `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BreakWordRequest) Reset()         { *m = BreakWordRequest{} }
func (m *BreakWordRequest) String() string { return proto.CompactTextString(m) }
func (*BreakWordRequest) ProtoMessage()    {}
func (*BreakWordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_87e717c78a24322a, []int{7}
}

func (m *BreakWordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BreakWordRequest.Unmarshal(m, b)
}
func (m *BreakWordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BreakWordRequest.Marshal(b, m, deterministic)
}
func (m *BreakWordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BreakWordRequest.Merge(m, src)
}
func (m *BreakWordRequest) XXX_Size() int {
	return xxx_messageInfo_BreakWordRequest.Size(m)
}
func (m *BreakWordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BreakWordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BreakWordRequest proto.InternalMessageInfo

func (m *BreakWordRequest) GetWord() string {
	if m != nil {
		return m.Word
	}
	return ""
}

type BreakWordResponse struct {
	Result               string   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BreakWordResponse) Reset()         { *m = BreakWordResponse{} }
func (m *BreakWordResponse) String() string { return proto.CompactTextString(m) }
func (*BreakWordResponse) ProtoMessage()    {}
func (*BreakWordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_87e717c78a24322a, []int{8}
}

func (m *BreakWordResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BreakWordResponse.Unmarshal(m, b)
}
func (m *BreakWordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BreakWordResponse.Marshal(b, m, deterministic)
}
func (m *BreakWordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BreakWordResponse.Merge(m, src)
}
func (m *BreakWordResponse) XXX_Size() int {
	return xxx_messageInfo_BreakWordResponse.Size(m)
}
func (m *BreakWordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BreakWordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BreakWordResponse proto.InternalMessageInfo

func (m *BreakWordResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

// Letters messages
type LettersRequest struct {
	Word                 string   `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LettersRequest) Reset()         { *m = LettersRequest{} }
func (m *LettersRequest) String() string { return proto.CompactTextString(m) }
func (*LettersRequest) ProtoMessage()    {}
func (*LettersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_87e717c78a24322a, []int{9}
}

func (m *LettersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LettersRequest.Unmarshal(m, b)
}
func (m *LettersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LettersRequest.Marshal(b, m, deterministic)
}
func (m *LettersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LettersRequest.Merge(m, src)
}
func (m *LettersRequest) XXX_Size() int {
	return xxx_messageInfo_LettersRequest.Size(m)
}
func (m *LettersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LettersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LettersRequest proto.InternalMessageInfo

func (m *LettersRequest) GetWord() string {
	if m != nil {
		return m.Word
	}
	return ""
}

type LettersResponse struct {
	Result               string   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LettersResponse) Reset()         { *m = LettersResponse{} }
func (m *LettersResponse) String() string { return proto.CompactTextString(m) }
func (*LettersResponse) ProtoMessage()    {}
func (*LettersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_87e717c78a24322a, []int{10}
}

func (m *LettersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LettersResponse.Unmarshal(m, b)
}
func (m *LettersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LettersResponse.Marshal(b, m, deterministic)
}
func (m *LettersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LettersResponse.Merge(m, src)
}
func (m *LettersResponse) XXX_Size() int {
	return xxx_messageInfo_LettersResponse.Size(m)
}
func (m *LettersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LettersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LettersResponse proto.InternalMessageInfo

func (m *LettersResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

// ComputeAverage messages
type ComputeAverageRequest struct {
	Number               int32    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComputeAverageRequest) Reset()         { *m = ComputeAverageRequest{} }
func (m *ComputeAverageRequest) String() string { return proto.CompactTextString(m) }
func (*ComputeAverageRequest) ProtoMessage()    {}
func (*ComputeAverageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_87e717c78a24322a, []int{11}
}

func (m *ComputeAverageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComputeAverageRequest.Unmarshal(m, b)
}
func (m *ComputeAverageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComputeAverageRequest.Marshal(b, m, deterministic)
}
func (m *ComputeAverageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputeAverageRequest.Merge(m, src)
}
func (m *ComputeAverageRequest) XXX_Size() int {
	return xxx_messageInfo_ComputeAverageRequest.Size(m)
}
func (m *ComputeAverageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputeAverageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ComputeAverageRequest proto.InternalMessageInfo

func (m *ComputeAverageRequest) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type ComputeAverageResponse struct {
	Result               float64  `protobuf:"fixed64,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComputeAverageResponse) Reset()         { *m = ComputeAverageResponse{} }
func (m *ComputeAverageResponse) String() string { return proto.CompactTextString(m) }
func (*ComputeAverageResponse) ProtoMessage()    {}
func (*ComputeAverageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_87e717c78a24322a, []int{12}
}

func (m *ComputeAverageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComputeAverageResponse.Unmarshal(m, b)
}
func (m *ComputeAverageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComputeAverageResponse.Marshal(b, m, deterministic)
}
func (m *ComputeAverageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputeAverageResponse.Merge(m, src)
}
func (m *ComputeAverageResponse) XXX_Size() int {
	return xxx_messageInfo_ComputeAverageResponse.Size(m)
}
func (m *ComputeAverageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputeAverageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ComputeAverageResponse proto.InternalMessageInfo

func (m *ComputeAverageResponse) GetResult() float64 {
	if m != nil {
		return m.Result
	}
	return 0
}

// Multiplier messages
type MultiplierRequest struct {
	Number               int32    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiplierRequest) Reset()         { *m = MultiplierRequest{} }
func (m *MultiplierRequest) String() string { return proto.CompactTextString(m) }
func (*MultiplierRequest) ProtoMessage()    {}
func (*MultiplierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_87e717c78a24322a, []int{13}
}

func (m *MultiplierRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiplierRequest.Unmarshal(m, b)
}
func (m *MultiplierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiplierRequest.Marshal(b, m, deterministic)
}
func (m *MultiplierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiplierRequest.Merge(m, src)
}
func (m *MultiplierRequest) XXX_Size() int {
	return xxx_messageInfo_MultiplierRequest.Size(m)
}
func (m *MultiplierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiplierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MultiplierRequest proto.InternalMessageInfo

func (m *MultiplierRequest) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type MultiplierResponse struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultiplierResponse) Reset()         { *m = MultiplierResponse{} }
func (m *MultiplierResponse) String() string { return proto.CompactTextString(m) }
func (*MultiplierResponse) ProtoMessage()    {}
func (*MultiplierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_87e717c78a24322a, []int{14}
}

func (m *MultiplierResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiplierResponse.Unmarshal(m, b)
}
func (m *MultiplierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiplierResponse.Marshal(b, m, deterministic)
}
func (m *MultiplierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiplierResponse.Merge(m, src)
}
func (m *MultiplierResponse) XXX_Size() int {
	return xxx_messageInfo_MultiplierResponse.Size(m)
}
func (m *MultiplierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiplierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MultiplierResponse proto.InternalMessageInfo

func (m *MultiplierResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

//FindMaximum messages
type FindMaximumRequest struct {
	Number               int32    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindMaximumRequest) Reset()         { *m = FindMaximumRequest{} }
func (m *FindMaximumRequest) String() string { return proto.CompactTextString(m) }
func (*FindMaximumRequest) ProtoMessage()    {}
func (*FindMaximumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_87e717c78a24322a, []int{15}
}

func (m *FindMaximumRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindMaximumRequest.Unmarshal(m, b)
}
func (m *FindMaximumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindMaximumRequest.Marshal(b, m, deterministic)
}
func (m *FindMaximumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindMaximumRequest.Merge(m, src)
}
func (m *FindMaximumRequest) XXX_Size() int {
	return xxx_messageInfo_FindMaximumRequest.Size(m)
}
func (m *FindMaximumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindMaximumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindMaximumRequest proto.InternalMessageInfo

func (m *FindMaximumRequest) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type FindMaximumResponse struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindMaximumResponse) Reset()         { *m = FindMaximumResponse{} }
func (m *FindMaximumResponse) String() string { return proto.CompactTextString(m) }
func (*FindMaximumResponse) ProtoMessage()    {}
func (*FindMaximumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_87e717c78a24322a, []int{16}
}

func (m *FindMaximumResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindMaximumResponse.Unmarshal(m, b)
}
func (m *FindMaximumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindMaximumResponse.Marshal(b, m, deterministic)
}
func (m *FindMaximumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindMaximumResponse.Merge(m, src)
}
func (m *FindMaximumResponse) XXX_Size() int {
	return xxx_messageInfo_FindMaximumResponse.Size(m)
}
func (m *FindMaximumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindMaximumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindMaximumResponse proto.InternalMessageInfo

func (m *FindMaximumResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

//SquareRoot messages
type SquareRootRequest struct {
	Number               int32    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SquareRootRequest) Reset()         { *m = SquareRootRequest{} }
func (m *SquareRootRequest) String() string { return proto.CompactTextString(m) }
func (*SquareRootRequest) ProtoMessage()    {}
func (*SquareRootRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_87e717c78a24322a, []int{17}
}

func (m *SquareRootRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SquareRootRequest.Unmarshal(m, b)
}
func (m *SquareRootRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SquareRootRequest.Marshal(b, m, deterministic)
}
func (m *SquareRootRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SquareRootRequest.Merge(m, src)
}
func (m *SquareRootRequest) XXX_Size() int {
	return xxx_messageInfo_SquareRootRequest.Size(m)
}
func (m *SquareRootRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SquareRootRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SquareRootRequest proto.InternalMessageInfo

func (m *SquareRootRequest) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type SquareRootResponse struct {
	NumberRoot           float64  `protobuf:"fixed64,1,opt,name=number_root,json=numberRoot,proto3" json:"number_root,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SquareRootResponse) Reset()         { *m = SquareRootResponse{} }
func (m *SquareRootResponse) String() string { return proto.CompactTextString(m) }
func (*SquareRootResponse) ProtoMessage()    {}
func (*SquareRootResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_87e717c78a24322a, []int{18}
}

func (m *SquareRootResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SquareRootResponse.Unmarshal(m, b)
}
func (m *SquareRootResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SquareRootResponse.Marshal(b, m, deterministic)
}
func (m *SquareRootResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SquareRootResponse.Merge(m, src)
}
func (m *SquareRootResponse) XXX_Size() int {
	return xxx_messageInfo_SquareRootResponse.Size(m)
}
func (m *SquareRootResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SquareRootResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SquareRootResponse proto.InternalMessageInfo

func (m *SquareRootResponse) GetNumberRoot() float64 {
	if m != nil {
		return m.NumberRoot
	}
	return 0
}

func init() {
	proto.RegisterType((*Sum)(nil), "calculator.Sum")
	proto.RegisterType((*CalculatorRequest)(nil), "calculator.CalculatorRequest")
	proto.RegisterType((*CalculatorResponse)(nil), "calculator.CalculatorResponse")
	proto.RegisterType((*PrimeNumberRequest)(nil), "calculator.PrimeNumberRequest")
	proto.RegisterType((*PrimeNumberResponse)(nil), "calculator.PrimeNumberResponse")
	proto.RegisterType((*GCFRequest)(nil), "calculator.GCFRequest")
	proto.RegisterType((*GCFResponse)(nil), "calculator.GCFResponse")
	proto.RegisterType((*BreakWordRequest)(nil), "calculator.BreakWordRequest")
	proto.RegisterType((*BreakWordResponse)(nil), "calculator.BreakWordResponse")
	proto.RegisterType((*LettersRequest)(nil), "calculator.LettersRequest")
	proto.RegisterType((*LettersResponse)(nil), "calculator.LettersResponse")
	proto.RegisterType((*ComputeAverageRequest)(nil), "calculator.ComputeAverageRequest")
	proto.RegisterType((*ComputeAverageResponse)(nil), "calculator.ComputeAverageResponse")
	proto.RegisterType((*MultiplierRequest)(nil), "calculator.MultiplierRequest")
	proto.RegisterType((*MultiplierResponse)(nil), "calculator.MultiplierResponse")
	proto.RegisterType((*FindMaximumRequest)(nil), "calculator.FindMaximumRequest")
	proto.RegisterType((*FindMaximumResponse)(nil), "calculator.FindMaximumResponse")
	proto.RegisterType((*SquareRootRequest)(nil), "calculator.SquareRootRequest")
	proto.RegisterType((*SquareRootResponse)(nil), "calculator.SquareRootResponse")
}

func init() {
	proto.RegisterFile("calculatorpb/calculator.proto", fileDescriptor_87e717c78a24322a)
}

var fileDescriptor_87e717c78a24322a = []byte{
	// 527 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0x51, 0x6f, 0xd3, 0x30,
	0x14, 0x85, 0x17, 0xca, 0x3a, 0xf5, 0x04, 0x75, 0xd4, 0x88, 0x52, 0x05, 0xca, 0x58, 0x04, 0x68,
	0xa8, 0x63, 0x2b, 0x45, 0x20, 0xc1, 0x13, 0xac, 0x52, 0xf7, 0xb2, 0x02, 0x4a, 0x91, 0x90, 0xe0,
	0x01, 0xa5, 0xad, 0x85, 0x22, 0x92, 0x3a, 0x73, 0xec, 0xc1, 0x7f, 0xe5, 0xcf, 0xa0, 0x24, 0x4d,
	0x62, 0x2f, 0x69, 0x83, 0x78, 0x8b, 0x7d, 0x8f, 0xbf, 0x6b, 0xf9, 0x9e, 0xa3, 0xa0, 0xbf, 0x70,
	0xfd, 0x85, 0xf4, 0x5d, 0xc1, 0x78, 0x38, 0x3f, 0x2d, 0x16, 0x27, 0x21, 0x67, 0x82, 0x11, 0x14,
	0x3b, 0xf6, 0x1b, 0x34, 0x66, 0x32, 0x20, 0x3d, 0xec, 0xad, 0x64, 0x30, 0xa7, 0xfc, 0x45, 0xcf,
	0x78, 0x64, 0x1c, 0xed, 0x3a, 0xd9, 0xb2, 0xa8, 0x8c, 0x7a, 0x37, 0xd4, 0xca, 0xc8, 0x7e, 0x8d,
	0xce, 0x38, 0x07, 0x39, 0xf4, 0x52, 0xd2, 0x48, 0x90, 0x43, 0x34, 0x22, 0x19, 0x24, 0x10, 0x73,
	0xb4, 0x7f, 0xa2, 0xf4, 0x9e, 0xc9, 0xc0, 0x89, 0x6b, 0xf6, 0x31, 0x88, 0x7a, 0x2e, 0x0a, 0xd9,
	0x2a, 0xa2, 0xa4, 0x8b, 0x26, 0xa7, 0x91, 0xf4, 0xc5, 0xfa, 0x02, 0xeb, 0x55, 0xac, 0xfe, 0xc4,
	0xbd, 0x80, 0x7e, 0x48, 0xba, 0x66, 0x6d, 0xba, 0x68, 0xa6, 0xd7, 0xc8, 0xd4, 0xe9, 0xca, 0x7e,
	0x8e, 0x3b, 0x9a, 0xba, 0x06, 0xfe, 0x0e, 0x38, 0x1f, 0x4f, 0x32, 0xe8, 0xff, 0x3c, 0xc2, 0x13,
	0x98, 0x09, 0xa1, 0xa6, 0xd1, 0x53, 0xdc, 0x3e, 0xe3, 0xd4, 0xfd, 0xf9, 0x85, 0xf1, 0x65, 0xd6,
	0x8e, 0xe0, 0xe6, 0x2f, 0xc6, 0x97, 0x89, 0xb2, 0xe5, 0x24, 0xdf, 0xf6, 0x00, 0x1d, 0x45, 0x57,
	0x09, 0x6d, 0xe5, 0xd0, 0xc7, 0x68, 0x5f, 0x50, 0x21, 0x28, 0x8f, 0xb6, 0x21, 0x9f, 0x61, 0x3f,
	0x57, 0xd5, 0x00, 0x4f, 0x71, 0x77, 0xcc, 0x82, 0x50, 0x0a, 0xfa, 0xfe, 0x8a, 0x72, 0xf7, 0x07,
	0xad, 0x7b, 0xee, 0x21, 0xba, 0xd7, 0x0f, 0x54, 0xb6, 0x30, 0xf2, 0x16, 0x03, 0x74, 0xa6, 0xd2,
	0x17, 0x5e, 0xe8, 0x7b, 0xf5, 0xd3, 0x3c, 0x06, 0x51, 0xc5, 0xf5, 0x4e, 0x99, 0x78, 0xab, 0xe5,
	0xd4, 0xfd, 0xed, 0x05, 0x32, 0xf8, 0x07, 0xa7, 0x68, 0xea, 0x1a, 0xf8, 0x00, 0x9d, 0xd9, 0xa5,
	0x74, 0x39, 0x75, 0x18, 0x13, 0x75, 0xec, 0x57, 0x20, 0xaa, 0x78, 0x8d, 0x3e, 0x80, 0x99, 0xd6,
	0xbf, 0x73, 0xc6, 0xb2, 0x77, 0x41, 0xba, 0x15, 0x0b, 0x47, 0x7f, 0x76, 0xd5, 0x44, 0xcd, 0x28,
	0xbf, 0xf2, 0x16, 0x94, 0x4c, 0x81, 0x62, 0x93, 0xf4, 0xd5, 0x48, 0x95, 0xe2, 0x67, 0x3d, 0xdc,
	0x54, 0x4e, 0xef, 0x60, 0xef, 0x10, 0x07, 0xa6, 0x92, 0x10, 0xa2, 0x1d, 0x28, 0x07, 0xcd, 0x3a,
	0xd8, 0x58, 0xcf, 0x88, 0x43, 0x83, 0xbc, 0x45, 0xe3, 0x7c, 0x3c, 0x21, 0x5d, 0x55, 0x5b, 0xe4,
	0xca, 0xba, 0x57, 0xda, 0x57, 0xce, 0x5e, 0xa0, 0x95, 0x3b, 0x9e, 0x3c, 0x50, 0x95, 0xd7, 0x03,
	0x63, 0xf5, 0x37, 0x54, 0x15, 0xda, 0x04, 0x7b, 0x6b, 0xb3, 0x13, 0x4b, 0x55, 0xeb, 0x39, 0xb1,
	0xee, 0x57, 0xd6, 0x14, 0xce, 0x37, 0xb4, 0x75, 0x63, 0x93, 0x43, 0xed, 0x65, 0xab, 0x52, 0x62,
	0xd9, 0xdb, 0x24, 0x19, 0xfc, 0xc8, 0x20, 0x1f, 0x81, 0xc2, 0xd6, 0xfa, 0x44, 0x4b, 0xd9, 0xd0,
	0x27, 0x5a, 0x4e, 0x43, 0x02, 0xfc, 0x0c, 0x53, 0xf1, 0xb2, 0x3e, 0xd3, 0x72, 0x24, 0xf4, 0x99,
	0x56, 0x84, 0x20, 0x66, 0x0e, 0x8d, 0xd8, 0x78, 0x85, 0x8b, 0xf5, 0x6b, 0x96, 0xa2, 0xa0, 0x5f,
	0xb3, 0x6c, 0x7e, 0x7b, 0xe7, 0xac, 0xfd, 0xf5, 0x96, 0xfa, 0x5b, 0x9a, 0x37, 0x93, 0x9f, 0xd1,
	0xcb, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x5b, 0xb3, 0x4d, 0xad, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CalculatorServiceClient is the client API for CalculatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalculatorServiceClient interface {
	// Calculator Takes in two numbers and returns the sum of them
	Calculator(ctx context.Context, in *CalculatorRequest, opts ...grpc.CallOption) (*CalculatorResponse, error)
	// PrimeNUmberDecomposition rpc
	PrimeNumber(ctx context.Context, in *PrimeNumberRequest, opts ...grpc.CallOption) (CalculatorService_PrimeNumberClient, error)
	// Get the GCF(Greatest Common Factor) of 2 numbers
	GCF(ctx context.Context, in *GCFRequest, opts ...grpc.CallOption) (CalculatorService_GCFClient, error)
	// break a sentance appart into words
	BreakWord(ctx context.Context, in *BreakWordRequest, opts ...grpc.CallOption) (CalculatorService_BreakWordClient, error)
	// letters
	Letters(ctx context.Context, in *LettersRequest, opts ...grpc.CallOption) (CalculatorService_LettersClient, error)
	// Average client streams numbers and reseives an average
	ComputeAverage(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_ComputeAverageClient, error)
	// Multiplier multiplies a stream of numbers
	Multiplier(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_MultiplierClient, error)
	// FindMaximum BiDi streaming API
	FindMaximum(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_FindMaximumClient, error)
	// SquareRoot unary API
	// This RPC will throw an error when the sent number is negative
	SquareRoot(ctx context.Context, in *SquareRootRequest, opts ...grpc.CallOption) (*SquareRootResponse, error)
}

type calculatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculatorServiceClient(cc grpc.ClientConnInterface) CalculatorServiceClient {
	return &calculatorServiceClient{cc}
}

func (c *calculatorServiceClient) Calculator(ctx context.Context, in *CalculatorRequest, opts ...grpc.CallOption) (*CalculatorResponse, error) {
	out := new(CalculatorResponse)
	err := c.cc.Invoke(ctx, "/calculator.CalculatorService/Calculator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorServiceClient) PrimeNumber(ctx context.Context, in *PrimeNumberRequest, opts ...grpc.CallOption) (CalculatorService_PrimeNumberClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CalculatorService_serviceDesc.Streams[0], "/calculator.CalculatorService/PrimeNumber", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServicePrimeNumberClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalculatorService_PrimeNumberClient interface {
	Recv() (*PrimeNumberResponse, error)
	grpc.ClientStream
}

type calculatorServicePrimeNumberClient struct {
	grpc.ClientStream
}

func (x *calculatorServicePrimeNumberClient) Recv() (*PrimeNumberResponse, error) {
	m := new(PrimeNumberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) GCF(ctx context.Context, in *GCFRequest, opts ...grpc.CallOption) (CalculatorService_GCFClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CalculatorService_serviceDesc.Streams[1], "/calculator.CalculatorService/GCF", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceGCFClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalculatorService_GCFClient interface {
	Recv() (*GCFResponse, error)
	grpc.ClientStream
}

type calculatorServiceGCFClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceGCFClient) Recv() (*GCFResponse, error) {
	m := new(GCFResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) BreakWord(ctx context.Context, in *BreakWordRequest, opts ...grpc.CallOption) (CalculatorService_BreakWordClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CalculatorService_serviceDesc.Streams[2], "/calculator.CalculatorService/BreakWord", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceBreakWordClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalculatorService_BreakWordClient interface {
	Recv() (*BreakWordResponse, error)
	grpc.ClientStream
}

type calculatorServiceBreakWordClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceBreakWordClient) Recv() (*BreakWordResponse, error) {
	m := new(BreakWordResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) Letters(ctx context.Context, in *LettersRequest, opts ...grpc.CallOption) (CalculatorService_LettersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CalculatorService_serviceDesc.Streams[3], "/calculator.CalculatorService/Letters", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceLettersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalculatorService_LettersClient interface {
	Recv() (*LettersResponse, error)
	grpc.ClientStream
}

type calculatorServiceLettersClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceLettersClient) Recv() (*LettersResponse, error) {
	m := new(LettersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) ComputeAverage(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_ComputeAverageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CalculatorService_serviceDesc.Streams[4], "/calculator.CalculatorService/ComputeAverage", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceComputeAverageClient{stream}
	return x, nil
}

type CalculatorService_ComputeAverageClient interface {
	Send(*ComputeAverageRequest) error
	CloseAndRecv() (*ComputeAverageResponse, error)
	grpc.ClientStream
}

type calculatorServiceComputeAverageClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceComputeAverageClient) Send(m *ComputeAverageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorServiceComputeAverageClient) CloseAndRecv() (*ComputeAverageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ComputeAverageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) Multiplier(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_MultiplierClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CalculatorService_serviceDesc.Streams[5], "/calculator.CalculatorService/Multiplier", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceMultiplierClient{stream}
	return x, nil
}

type CalculatorService_MultiplierClient interface {
	Send(*MultiplierRequest) error
	CloseAndRecv() (*MultiplierResponse, error)
	grpc.ClientStream
}

type calculatorServiceMultiplierClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceMultiplierClient) Send(m *MultiplierRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorServiceMultiplierClient) CloseAndRecv() (*MultiplierResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MultiplierResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) FindMaximum(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_FindMaximumClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CalculatorService_serviceDesc.Streams[6], "/calculator.CalculatorService/FindMaximum", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceFindMaximumClient{stream}
	return x, nil
}

type CalculatorService_FindMaximumClient interface {
	Send(*FindMaximumRequest) error
	Recv() (*FindMaximumResponse, error)
	grpc.ClientStream
}

type calculatorServiceFindMaximumClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceFindMaximumClient) Send(m *FindMaximumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorServiceFindMaximumClient) Recv() (*FindMaximumResponse, error) {
	m := new(FindMaximumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) SquareRoot(ctx context.Context, in *SquareRootRequest, opts ...grpc.CallOption) (*SquareRootResponse, error) {
	out := new(SquareRootResponse)
	err := c.cc.Invoke(ctx, "/calculator.CalculatorService/SquareRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculatorServiceServer is the server API for CalculatorService service.
type CalculatorServiceServer interface {
	// Calculator Takes in two numbers and returns the sum of them
	Calculator(context.Context, *CalculatorRequest) (*CalculatorResponse, error)
	// PrimeNUmberDecomposition rpc
	PrimeNumber(*PrimeNumberRequest, CalculatorService_PrimeNumberServer) error
	// Get the GCF(Greatest Common Factor) of 2 numbers
	GCF(*GCFRequest, CalculatorService_GCFServer) error
	// break a sentance appart into words
	BreakWord(*BreakWordRequest, CalculatorService_BreakWordServer) error
	// letters
	Letters(*LettersRequest, CalculatorService_LettersServer) error
	// Average client streams numbers and reseives an average
	ComputeAverage(CalculatorService_ComputeAverageServer) error
	// Multiplier multiplies a stream of numbers
	Multiplier(CalculatorService_MultiplierServer) error
	// FindMaximum BiDi streaming API
	FindMaximum(CalculatorService_FindMaximumServer) error
	// SquareRoot unary API
	// This RPC will throw an error when the sent number is negative
	SquareRoot(context.Context, *SquareRootRequest) (*SquareRootResponse, error)
}

// UnimplementedCalculatorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCalculatorServiceServer struct {
}

func (*UnimplementedCalculatorServiceServer) Calculator(ctx context.Context, req *CalculatorRequest) (*CalculatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Calculator not implemented")
}
func (*UnimplementedCalculatorServiceServer) PrimeNumber(req *PrimeNumberRequest, srv CalculatorService_PrimeNumberServer) error {
	return status.Errorf(codes.Unimplemented, "method PrimeNumber not implemented")
}
func (*UnimplementedCalculatorServiceServer) GCF(req *GCFRequest, srv CalculatorService_GCFServer) error {
	return status.Errorf(codes.Unimplemented, "method GCF not implemented")
}
func (*UnimplementedCalculatorServiceServer) BreakWord(req *BreakWordRequest, srv CalculatorService_BreakWordServer) error {
	return status.Errorf(codes.Unimplemented, "method BreakWord not implemented")
}
func (*UnimplementedCalculatorServiceServer) Letters(req *LettersRequest, srv CalculatorService_LettersServer) error {
	return status.Errorf(codes.Unimplemented, "method Letters not implemented")
}
func (*UnimplementedCalculatorServiceServer) ComputeAverage(srv CalculatorService_ComputeAverageServer) error {
	return status.Errorf(codes.Unimplemented, "method ComputeAverage not implemented")
}
func (*UnimplementedCalculatorServiceServer) Multiplier(srv CalculatorService_MultiplierServer) error {
	return status.Errorf(codes.Unimplemented, "method Multiplier not implemented")
}
func (*UnimplementedCalculatorServiceServer) FindMaximum(srv CalculatorService_FindMaximumServer) error {
	return status.Errorf(codes.Unimplemented, "method FindMaximum not implemented")
}
func (*UnimplementedCalculatorServiceServer) SquareRoot(ctx context.Context, req *SquareRootRequest) (*SquareRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SquareRoot not implemented")
}

func RegisterCalculatorServiceServer(s *grpc.Server, srv CalculatorServiceServer) {
	s.RegisterService(&_CalculatorService_serviceDesc, srv)
}

func _CalculatorService_Calculator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServiceServer).Calculator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.CalculatorService/Calculator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServiceServer).Calculator(ctx, req.(*CalculatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculatorService_PrimeNumber_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimeNumberRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalculatorServiceServer).PrimeNumber(m, &calculatorServicePrimeNumberServer{stream})
}

type CalculatorService_PrimeNumberServer interface {
	Send(*PrimeNumberResponse) error
	grpc.ServerStream
}

type calculatorServicePrimeNumberServer struct {
	grpc.ServerStream
}

func (x *calculatorServicePrimeNumberServer) Send(m *PrimeNumberResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CalculatorService_GCF_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GCFRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalculatorServiceServer).GCF(m, &calculatorServiceGCFServer{stream})
}

type CalculatorService_GCFServer interface {
	Send(*GCFResponse) error
	grpc.ServerStream
}

type calculatorServiceGCFServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceGCFServer) Send(m *GCFResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CalculatorService_BreakWord_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BreakWordRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalculatorServiceServer).BreakWord(m, &calculatorServiceBreakWordServer{stream})
}

type CalculatorService_BreakWordServer interface {
	Send(*BreakWordResponse) error
	grpc.ServerStream
}

type calculatorServiceBreakWordServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceBreakWordServer) Send(m *BreakWordResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CalculatorService_Letters_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LettersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalculatorServiceServer).Letters(m, &calculatorServiceLettersServer{stream})
}

type CalculatorService_LettersServer interface {
	Send(*LettersResponse) error
	grpc.ServerStream
}

type calculatorServiceLettersServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceLettersServer) Send(m *LettersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CalculatorService_ComputeAverage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServiceServer).ComputeAverage(&calculatorServiceComputeAverageServer{stream})
}

type CalculatorService_ComputeAverageServer interface {
	SendAndClose(*ComputeAverageResponse) error
	Recv() (*ComputeAverageRequest, error)
	grpc.ServerStream
}

type calculatorServiceComputeAverageServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceComputeAverageServer) SendAndClose(m *ComputeAverageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorServiceComputeAverageServer) Recv() (*ComputeAverageRequest, error) {
	m := new(ComputeAverageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CalculatorService_Multiplier_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServiceServer).Multiplier(&calculatorServiceMultiplierServer{stream})
}

type CalculatorService_MultiplierServer interface {
	SendAndClose(*MultiplierResponse) error
	Recv() (*MultiplierRequest, error)
	grpc.ServerStream
}

type calculatorServiceMultiplierServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceMultiplierServer) SendAndClose(m *MultiplierResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorServiceMultiplierServer) Recv() (*MultiplierRequest, error) {
	m := new(MultiplierRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CalculatorService_FindMaximum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServiceServer).FindMaximum(&calculatorServiceFindMaximumServer{stream})
}

type CalculatorService_FindMaximumServer interface {
	Send(*FindMaximumResponse) error
	Recv() (*FindMaximumRequest, error)
	grpc.ServerStream
}

type calculatorServiceFindMaximumServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceFindMaximumServer) Send(m *FindMaximumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorServiceFindMaximumServer) Recv() (*FindMaximumRequest, error) {
	m := new(FindMaximumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CalculatorService_SquareRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SquareRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServiceServer).SquareRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.CalculatorService/SquareRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServiceServer).SquareRoot(ctx, req.(*SquareRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CalculatorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.CalculatorService",
	HandlerType: (*CalculatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Calculator",
			Handler:    _CalculatorService_Calculator_Handler,
		},
		{
			MethodName: "SquareRoot",
			Handler:    _CalculatorService_SquareRoot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PrimeNumber",
			Handler:       _CalculatorService_PrimeNumber_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GCF",
			Handler:       _CalculatorService_GCF_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BreakWord",
			Handler:       _CalculatorService_BreakWord_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Letters",
			Handler:       _CalculatorService_Letters_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ComputeAverage",
			Handler:       _CalculatorService_ComputeAverage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Multiplier",
			Handler:       _CalculatorService_Multiplier_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FindMaximum",
			Handler:       _CalculatorService_FindMaximum_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "calculatorpb/calculator.proto",
}
